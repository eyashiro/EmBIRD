#!/bin/bash

VERSIONNUMBER="1.1.0"

#################################################################
#
# Embedded Barcoded Illumina Read Demultiplexer (EmBIRD)
#
# Author: Erika Yashiro, Ph.D.
# Last modified: 7 March 2024
#
# embird [path to gz directory containing lane reads] [adapter barcode, primers list file] [0 or 1 mismatch allowance in barcode]
#
# EmBIRD will demultiplex raw fastq.gz data with the following dual-barcoded configuration:
# Fbarcde-Linker-Fprimer ----- Rprimer-Linker-Rbarcode
#
# 1 mismatch workflow
# allows degenerate nucleotide codes
# The pipeline first searches out the Fprimer and Rprimer with 2 mismatch allowance (no indels).
# Next, the pipeline will search out the barcodes upstream of the primers with 1 mismatch allowance in the barcode region (no indels).
# Finally, only the reads that with linked barcode-linker-primer are kept.
#
# 0 mismatch workflow
# uses regex for degenerate positions in primers and linkers, e.g. [ATCG] for N.
#
# The path to the gz directory typically contains all the reads from a single lane that have been divided into multiple files because of the size of the data. (parent path)
# e.g. of parent path: /home/data/Campaign2020
# e.g. of Col2 path: /home/data/Campaign2020/lane1
# e.g. of Col2 data in samplesheet: lane1
#
# The adapter barcode and primers file should be in the current directory, and contain no path string.
# The adapter barcode sequences list should have the following columns, separated by semi-colons, no spaces:
# Col1: sample name
# Col2: raw fastq directory in which sample belongs R1
# Col3: raw fastq directory in which sample belongs R2
# Col4: F primer
# Col5: R primer
# Col6: F barcode
# Col7: R barcode
# Col8: F linker
# Col9: R linker
#
# Dependencies:
#    cutadapt, currently v4.5
#    zlib 1.2.6 or higher
#    pigz 2.8 (for cutadapt to be able to use multicore)
#
# Cutadapt number of cores set to: 4
#
##################################################################

# Set error check
set -e
set -o pipefail

STARTTIME=$(date '+%Y%m%d-%H%M%S')

echoWithDate() {
  CURRENTTIME=[$(date '+%Y-%m-%d %H:%M:%S')]
  echo "$CURRENTTIME: $1"
  echo "$CURRENTTIME: $1" >> embird-$STARTTIME.log
}


# Check if output directories exist
if [ -d "fastq_gz_samples" ]
  then
  echoWithDate "Directory fastqR1 exists. Removing directory."
 rm -r fastq_gz_samples
 #exit 1
fi

if [ -d "tempdir" ]
  then
  echoWithDate "Directory tempdir exists. Removing directory."
  rm -rf tempdir
fi

echo "EMbedded Barcoded Illumina Read Demultiplexer, version $VERSIONNUMBER" > embird-$STARTTIME.log
echo "" >> embird-$STARTTIME.log

# Create new directories for putting the R1 and R2 fastq files.
mkdir fastq_gz_samples tempdir

# Path to fastq.gz files, parent directory
GZDIR=$1
echoWithDate "GZDIR is: $GZDIR"
# adapter barcode sequences list file name
SAMPLESFILE="$2"
echoWithDate "SAMPLESFILE is: $SAMPLESFILE"

# Create list of folders (LIBRARY) with raw fastq.gz files
RAWGZDIRLISTR1=$(sed '1d' $SAMPLESFILE | awk -F ";" '{ print $2 }' | sort | uniq)
echoWithDate "Create list of folders (lanes) with raw fastq.gz files. RAWGZDIRLISTR1: $RAWGZDIRLISTR1"

# Read number of mismatches (0 or 1). Exit otherwise.
MISMATCH=$3
if [ $MISMATCH -gt 1 ]
  then
  echo "Mismatch allowance greater than 1 is not implemented in EmBIRD. Exiting."
  exit
fi

# number of cores to use during cutadapt
CORES=4

echoWithDate "Starting directory loop."
for GZDIRNAMER1 in $RAWGZDIRLISTR1  # DIRECTORY/LIBRARY
  do

  # Col2: raw R1 fastq.gz folder
  # GZDIRNAMER1
  # Col3: raw R2 fastq.gz folder
  GZDIRNAMER2=$(grep "$GZDIRNAMER1" $SAMPLESFILE | head -n 1 | awk -F ";" '{ print $3 }')

  # Subset the samples list for the gzfile
  # This will also remove the header line in the output file.
  echoWithDate "Subset the samples list for the gzfile"
  grep -w "$GZDIRNAMER1" $SAMPLESFILE > tempdir/gzsamplefile

  # do following for each fastq.gz file in $GZDIRNAMER1 folder
   # list of R1 gz files (the gz files are formatted like XXXX_R1_003.fastq.gz)
   echoWithDate "Making list of R1 gz files, and creating list of sample suffixes."
   GZFILES=$(ls $GZDIR/$GZDIRNAMER1 | grep "_R1_" | sed 's/\(.*_R1_\)\(.*.fastq.gz\)/\2/g' | sort -n)

   echoWithDate "Starting directory/Library loop."
  for GZFILENAME in $GZFILES    # GZ FILE IN DIRECTORY/LIBRARY
    do
    # Remove the .gz from the raw fastq file names
    # Extract gz file into tempdir or memory
    R1="_R1_"
    R2="_R2_"
    echoWithDate "gzipping input folder: $GZDIR/$GZDIRNAMER1/ file with extension: $R1$GZFILENAME"
    FQR1=$(gzip -cd $GZDIR/$GZDIRNAMER1/*$R1$GZFILENAME)     # R1
    echoWithDate "gzipping input folder: $GZDIR/$GZDIRNAMER1/ file with extension: $R2$GZFILENAME"
    FQR2=$(gzip -cd $GZDIR/$GZDIRNAMER1/*$R2$GZFILENAME)     # R2

    # INITIAL CLEANING OF RAW FASTQ FILE
    # Extract header / machine name
    HEADERID=$(echo "$FQR1" | sed -n '1p' | awk -F ":" '{ print $1 }')
    echoWithDate "HEADERID: $HEADERID"

    # Extract reads that passed filter (not 1:Y:0 or 2:Y:0)
    # Replace 2:N: in R2 reads with 1:N: for all reads
    echoWithDate "Extract reads that passed filter. Replace 2:N: in R2 reads with 1:N: for all reads."
    FQR1pass=$(echo "$FQR1" | grep -A3 "1:N:0:" | sed '/^--$/d')
    READNUM=$(echo "$FQR1pass" | grep -c "$HEADERID")  # count number of reads that passed filter R1
    echoWithDate "Number of reads in FQR1pass: $READNUM"
    FQR2pass=$(echo "$FQR2" | grep -A3 "2:N:0:" | sed -e '/^--$/d' -e 's/2:N:0/1:N:0/g')
    READNUM=$(echo "$FQR2pass" | grep -c "$HEADERID")  # count number of reads that passed filter R2
    echoWithDate "Number of reads in FQR2pass: $READNUM"
    unset FQR1   # remove from memory
    unset FQR2

    # Retrieve reads containing F primer
    #echoWithDate "Retrieve reads containing F primer"
      # Get F primer sequence
    #Fprimer=$(sed -n '1p' tempdir/gzsamplefile | awk -F ";" '{ print $4 }')
    #FREADS=$(echo "$FQR1pass" | grep -E -B1 -A2 "$Fprimer" | sed '/^--$/d')
    #FTMP=$(echo "$FQR2pass" | grep -E -B1 -A2 "$Fprimer" | sed '/^--$/d')
    #FREADS=$(echo "$FREADS"$'\n'"$FTMP")
    #unset FTMP
    #READNUM=$(echo "$FREADS" | grep -c "$HEADERID")
    #echoWithDate "Number of reads in FREADS: $READNUM"

    # cutadapt approach
    echoWithDate "Retrieve reads containing both F and R primers. Mismatch allowance in primer region is 2 per primer."
      # Get F and R primer sequences
    Fprimer=$(sed -n '1p' tempdir/gzsamplefile | awk -F ";" '{ print $4 }')
    Rprimer=$(sed -n '1p' tempdir/gzsamplefile | awk -F ";" '{ print $5 }')
      # for cutadapt, make input fastq files
    echo "$FQR1pass" > tempdir/FQR1pass.fastq
    echo "$FQR2pass" > tempdir/FQR2pass.fastq
      # Fprimer length
    Flen=$(printf "$Fprimer" | wc -m)
    Rlen=$(printf "$Rprimer" | wc -m)
      # use cutadapt to retrieve reads with primers, allow 2 mismatches
      # Forward direction
    cutadapt --no-indels --core=4 --action=none --pair-adapters \
             -g "$Fprimer;max_errors=2;min_overlap=$Flen" \
             -G "$Rprimer;max_errors=2;min_overlap=$Rlen" \
             -o tempdir/F-{name}.fastq \
             -p tempdir/R-{name}.fastq \
             tempdir/FQR1pass.fastq tempdir/FQR2pass.fastq
             1>>cutadapt.report.txt 2>>cutadapt.report.txt
    cutadapt --no-indels --core=4 --action=none --pair-adapters \
             -g "$Fprimer;max_errors=2;min_overlap=$Flen" \
             -G "$Rprimer;max_errors=2;min_overlap=$Rlen" \
             -o tempdir/F2-{name}.fastq \
             -p tempdir/R2-{name}.fastq \
             tempdir/FQR2pass.fastq tempdir/FQR1pass.fastq
             1>>cutadapt.report.txt 2>>cutadapt.report.txt
      # Merge the 2 fastq files
    cat tempdir/F2-1.fastq >> tempdir/F-1.fastq
    cat tempdir/R2-1.fastq >> tempdir/R-1.fastq
      # remove temporary files
    rm tempdir/FQR1pass.fastq \
      tempdir/FQR2pass.fastq \
      tempdir/F2-1.fastq \
      tempdir/R2-1.fastq \
      tempdir/*unknown.fastq

    # Get R primer sequence, grep R2 then R1 so that the order of reads are as close with Freads.fastq as possible
    #echoWithDate "Retrieve reads containing R primer"
    #Rprimer=$(sed -n '1p' tempdir/gzsamplefile | awk -F ";" '{ print $5 }')
    #RREADS=$(echo "$FQR2pass" | grep -E -B1 -A2 "$Rprimer" | sed '/^--$/d')
    #RTMP=$(echo "$FQR1pass" | grep -E -B1 -A2 "$Rprimer" | sed '/^--$/d')
    #RREADS=$(echo "$RREADS"$'\n'"$RTMP")
    #unset RTMP
    unset FQR1pass  # remove from memory
    unset FQR2pass

    #READNUM=$(echo "$RREADS" | grep -c "$HEADERID")
    #echoWithDate "Number of reads in RREADS: $READNUM"
    echoWithDate ""

    # Start demultiplexing samples from each raw fastq file
    echoWithDate "Start demultiplexing samples from each raw fastq file"
    while read LINE     # SAMPLES IN EACH GZ FILE
      do
      # Read the column information in the samples sheet
      # Col1: sample name
      SAMPLENAME=$(echo $LINE | awk -F ";" '{ print $1 }')
      echoWithDate "Demultiplexing SAMPLE NAME: $SAMPLENAME"
      # Col4: F primer
      #Fprimer=$(echo $LINE | awk -F ";" '{ print $4 }')
      # Col5: R primer
      #Rprimer=$(echo $LINE | awk -F ";" '{ print $5 }')
      # Col6: F barcode
      Fbarcode=$(echo $LINE | awk -F ";" '{ print $6 }')
      # Col7: R barcode
      Rbarcode=$(echo $LINE | awk -F ";" '{ print $7 }')
      # Col8: F linker
      Flinker=$(echo $LINE | awk -F ";" '{ print $8 }')
      # Col9: R linker
      Rlinker=$(echo $LINE | awk -F ";" '{ print $9 }')

      # Retrieve samples by barcode and linker
      echoWithDate "Retreive samples by barcode and linker"

      # 0 mismatches allowed in primer barcode region
      if [ $MISMATCH == 0 ]
        then
      echoWithDate "Searching F: $Fbarcode$Flinker$Fprimer and R: $Rbarcode$Rlinker$Rprimer"
      echoWithDate "Mismatch allowance in each primer barcode: 0"
      FREADS=$(cat tempdir/F-1.fastq)
      RREADS=$(cat tempdir/R-1.fastq)
      FSAMPLE=$(echo "$FREADS" | grep -E -B1 -A2 "^$Fbarcode$Flinker$Fprimer" | sed '/^--$/d')
      RSAMPLE=$(echo "$RREADS" | grep -E -B1 -A2 "^$Rbarcode$Rlinker$Rprimer" | sed '/^--$/d')
      rm tempdir/F-1.fastq temdpr/R-1.fastq
      #fi

      # 1 mismatch allowed in primer barcode region
      # if [ $MISMATCH == 1 ]
      #  then
      #  echoWithDate "Searching F: $Fbarcode$Flinker$Fprimer and R: $Rbarcode$Rlinker$Rprimer"
      #  echoWithDate "Mismatch allowance in each primer barcode: 1"
        # make a list file barcode variants
        # length of Fbarcode
        #BARCODELENGTH=$(echo "$Fbarcode" | awk '{ print length() }')

        # remove temporary degenerate barcode list file, if any.
        #rm -f tempdir/FDegBC.txt tempdir/RDegBC.txt
         # Set start position of degeneracy
        #POS=1

        # Start generating degenerate F barcode with primers list.
        #while [ $POS -le $BARCODELENGTH ]
        #  do
        #  # Add degeneracy to a position of the barcode
        #  FDegBarcode=$(echo "$Fbarcode" | awk -v pos=$POS -v repl="[ATGC]" '{ print substr($0,1,pos-1) repl substr($0, pos+1)}')
        #  # Add barcode to temp file.
        #  echo "^$FDegBarcode$Flinker$Fprimer" >> tempdir/FDegBC.txt
        #    # Note: remove the _$Fbarcode from output file after testing.
        #  # Count up 1 unit
        #  POS=$((POS+1))
        #  done
        #unset FDegBarcode

        # length of Rbarcode
        #BARCODELENGTH=$(echo "$Rbarcode" | awk '{ print length() }')
        # Set start position of degeneracy
        #POS=1

        # Start generating R barcode list
        #while [ $POS -le $BARCODELENGTH ]
        #  do
        #  # Add degeneracy to a position of the reverse barcode
        #  RDegBarcode=$(echo "$Rbarcode" | awk -v pos=$POS -v repl="[ATGC]" '{ print substr($0,1,pos-1) repl substr($0, pos+1)}')
        #  # Add barcode to temp file
        #  echo "^$RDegBarcode$Rlinker$Rprimer" >> tempdir/RDegBC.txt
        #     # Note: remove the _$Rbarcode from output file after testing.
        #  # Count up 1 unit
        #  POS=$((POS+1))
        #  done
        #unset RDegBarcode


        # Make a linear string of all the barcoded primers
        #FDegBarcodes=$(cat tempdir/FDegBC.txt | tr "\n" "|" | sed 's/|$//g')
        #RDegBarcodes=$(cat tempdir/RDegBC.txt | tr "\n" "|" | sed 's/|$//g')

        # Run grep with the list of barcoded primers
        #FSAMPLE=$(echo "$FREADS" | grep -E -B1 -A2 "$FDegBarcodes" | sed '/^--$/d')
        #RSAMPLE=$(echo "$RREADS" | grep -E -B1 -A2 "$RDegBarcodes" | sed '/^--$/d')

        # use the cutadapt option to demultiplex => further down this script.

      #fi

      # Run a check on numbers
      FNUM=$(echo "$FSAMPLE" | grep -c "$HEADERID")
      RNUM=$(echo "$RSAMPLE" | grep -c "$HEADERID")
      FBC=$(echo "$FSAMPLE" | grep -c "$Fbarcode$Flinker$Fprimer") # exact match search
      echoWithDate "FNUM: $FNUM;  RNUM: $RNUM; FbarcodeNum: $FBC"
      echoWithDate "the above F values should be the same"
      if [ "$FNUM" -eq "$FBC" ]
        then
        echoWithDate "The above F values are the same."
        else
          echoWithDate "WARNING: FNUM and FbarcodeNum are not the same. Something may be wrong."
      fi

      # Retrieve list of reads that are not F-F or R-R
      echoWithDate "Retrieve list of reads that are not F-F or R-R"
      LISTF=$(echo "$FSAMPLE" | grep "$HEADERID" | sort | uniq -u)
      LISTR=$(echo "$RSAMPLE" | grep "$HEADERID" | sort | uniq -u)

      # Generate list of headers that have both F and R primers
      echoWithDate "Generate list of headers that have both F and R primers"
      LISTMASTER=$(echo "$LISTF"$'\n'"$LISTR" | sort | uniq -d)
      TIMESTAMP=$(date +'%Y-%b-%H.%M.%S')
      echo "$LISTMASTER" > tempdir/listmaster.$SAMPLENAME.$TIMESTAMP.txt
      READNUM=$(echo "$LISTMASTER" | wc -l)
      echoWithDate "Number of reads in LISTMASTER: $READNUM"
      unset LISTF  # remove from memory
      unset LISTR

      # Retrieve reads using the final header list.
      echoWithDate "Retrieve reads using the final header list."
      grep  -A3 -wf <( echo "$LISTMASTER" ) <<< "$FSAMPLE" | sed '/^--$/d' > tempdir/Freads.sample.R1.fastq
      grep  -A3 -wf <( echo "$LISTMASTER" ) <<< "$RSAMPLE" | sed '/^--$/d' > tempdir/Rreads.sample.R2.fastq
      unset FSAMPLE   # remove from memory
      unset RSAMPLE
     fi # this is end of workflow with zero mismatches

     # 1 mismatch allowed in primer barcode region
      if [ $MISMATCH == 1 ]
       then
       echoWithDate "Searching F: $Fbarcode$Flinker$Fprimer and R: $Rbarcode$Rlinker$Rprimer"
       echoWithDate "Mismatch allowance in each primer barcode: 1"
       # Retireve all reads containing the barcode pairs.
       cutadapt --no-indels --core=$CORES --action=retain --pair-adapters \
                 -g "^$Fbarcode;max_errors=1" \
                 -G "^$Rbarcode;max_errors=1" \
                 -o tempdir/Fbc-{name}.fastq \
                 -p tempdir/Rbc-{name}.fastq \
                 tempdir/F-1.fastq tempdir/R-1.fastq 1>>cutadapt.report.txt 2>>cutadapt.report.txt

       # Filter out reads that do not have the exact configuration barcode-linker-primer
       cutadapt --no-indels --core=$CORES --action=retain --pair-adapters \
                -g "^$Fbarcode$Flinker$Fprimer;max_errors=3" \
                -G "^$Rbarcode$Rlinker$Rprimer;max_errors=3" \
                -o tempdir/Fbc2-{name}.fastq \
                -p tempdir/Rbc2-{name}.fastq \
                tempdir/Fbc-1.fastq tempdir/Rbc-1.fastq 2>> cutadapt.report.txt 1>> cutadapt.report.txt
       rm tempdir/Fbc-1.fastq tempdir/Rbc-1.fastq

       # remove unknown fastq files.
       rm tempdir/*unknown.fastq
       # rename cutadapt output fastq files
       mv tempdir/Fbc2-1.fastq tempdir/Freads.sample.R1.fastq
       mv tempdir/Rbc2-1.fastq tempdir/Rreads.sample.R2.fastq

      fi  # this is end of workflow with 1 mismatch in the barcodes

      # Replace R2 file's 1:N:0 to 2:N:0
      echoWithDate "Replace R2 file's 1:N:0 to 2:N:0"
      sed -i 's/1:N:0/2:N:0/g' tempdir/Rreads.sample.R2.fastq

      # Trim adapter and linker sequences from reads and quality strings.
      # Append the trimmed reads to the corresponding sample fastq file.
      echoWithDate "Trim adapter and linker sequences from reads. Append the trimmed reads to the sample fastq file."
      R1="_R1"
      R2="_R2"
      FAMBI="$Flinker"
      RAMBI="$Rlinker"
      echoWithDate "Trimming F: $Fbarcode$FAMBI and R: $Rbarcode$RAMBI using cutadapt"
      cutadapt --cores=$CORES -g "^$Fbarcode$FAMBI;max_errors=1" tempdir/Freads.sample.R1.fastq >> tempdir/$SAMPLENAME$R1.fastq 2>>cutadapt.report.txt
      cutadapt --cores=$CORES -g "^$Rbarcode$RAMBI;max_errors=1" tempdir/Rreads.sample.R2.fastq >> tempdir/$SAMPLENAME$R2.fastq 2>>cutadapt.report.txt

      echoWithDate ""
      done < tempdir/gzsamplefile
      rm tempdir/F-1.fastq tempdir/R-1.fastq
    done

    # Make list of sample names in the directory/lane
    SAMPLESLIST=$(awk -F ";" '{ print $1 }' tempdir/gzsamplefile)

    # Compress samples file as *.gz and move the files to the samples folder
    echoWithDate "Compress samples file as *.gz and move the files to the samples folder"
    for SAMPLENAME in $SAMPLESLIST
      do
    gzip -c tempdir/$SAMPLENAME$R1.fastq > fastq_gz_samples/$SAMPLENAME$R1.fastq.gz
    gzip -c tempdir/$SAMPLENAME$R2.fastq > fastq_gz_samples/$SAMPLENAME$R2.fastq.gz
    # Remove temporary samples files
    rm tempdir/$SAMPLENAME$R1.fastq tempdir/$SAMPLENAME$R2.fastq
     done
  done

# Remove temporary folder
# rm -r tempdir
rm -f tempdir/FDegBC.txt tempdir/RDegBC.txt

echoWithDate "EmBIRD job is done."
exit 0

